/* import React, { useState } from 'react';
import axios from 'axios';
import './App.css';
// A simple loader component to show when the app is translating
const Loader = () => (
  <div className="flex justify-center items-center my-4">
    <div className="w-8 h-8 rounded-full border-4 border-t-4 border-gray-200 border-t-sky-500 animate-spin"></div>
  </div>
);

// List of languages for the dropdown menu
const languages = [
  { code: 'es', label: 'Spanish üá™üá∏' },
  { code: 'fr', label: 'French üá´üá∑' },
  { code: 'de', label: 'German üá©üá™' },
  { code: 'hi', label: 'Hindi ÔøΩüá≥' },
  { code: 'ja', label: 'Japanese üáØüáµ' },
  { code: 'ru', label: 'Russian üá∑üá∫' },
  { code: 'zh', label: 'Chinese (Simplified) üá®üá≥' },
];

const App = () => {
  // State hooks for managing the app's data and UI
  const [text, setText] = useState('');
  const [targetLang, setTargetLang] = useState('es');
  const [translation, setTranslation] = useState('');
  const [loading, setLoading] = useState(false);
  const [errorMsg, setErrorMsg] = useState('');

  // Handle the translation request when the button is clicked
  const handleTranslate = async () => {
    // Do not proceed if the input text or target language is empty
    if (!text.trim() || !targetLang) {
      setErrorMsg('Please enter some text and select a language to translate to.');
      setTranslation('');
      return;
    }
    
    setLoading(true);
    setErrorMsg('');

    try {
      // Make a POST request to our local backend server
      const res = await axios.post('http://localhost:33001/translate', {
        text,
        targetLang
      });
      console.log('The Frontend Response Data',res.data)
      // Update the translation state with the response from our backend
      setTranslation(res.data.data.translatedText);
    } catch (err) {
      // Handle any errors that occur during the request
      console.error('Translation failed:', err);
      setErrorMsg('‚ùå Failed to translate. Please try again.');
      setTranslation('');
    } finally {
      // Reset the loading state regardless of success or failure
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4 font-sans">
      <div className="bg-white rounded-xl shadow-lg p-6 md:p-10 w-full max-w-lg text-center border border-gray-200">
        <h1 className="text-3xl md:text-4xl font-bold text-gray-800 mb-2 flex items-center justify-center space-x-2">
          <span>üåç Language Learning App</span>
        </h1>


        {/* Input text area */}
        <textarea
          className="w-full h-32 p-4 text-lg border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-sky-500 transition-all duration-300 resize-none mb-4"
          value={text}
          onChange={(e) => setText(e.target.value)}
          placeholder="Type something to translate..."
        />

        {/* Language selection dropdown */}
        <div className="flex flex-col md:flex-row md:items-center justify-between space-y-4 md:space-y-0 md:space-x-4 mb-6">
          <label htmlFor="language-select" className="text-lg text-gray-700">Translate to:</label>
          <select
            id="language-select"
            className="flex-1 w-full md:w-auto p-3 text-lg border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-sky-500 transition-all duration-300"
            value={targetLang}
            onChange={(e) => setTargetLang(e.target.value)}
          >
            {languages.map((lang) => (
              <option key={lang.code} value={lang.code}>
                {lang.label}
              </option>
            ))}
          </select>
        </div>

        {/* Translate button */}
        <button
          className="w-full p-3 text-lg font-semibold text-white bg-sky-600 rounded-lg shadow-md hover:bg-sky-700 focus:outline-none focus:ring-4 focus:ring-sky-300 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300"
          onClick={handleTranslate}
          disabled={loading}
        >
          {loading ? 'Translating...' : 'Translate'}
        </button>

        {/* Output section */}
        {loading && <Loader />}
        <div className="output-section mt-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
          <h2 className="text-xl font-bold text-gray-800 mb-2">Translation:</h2>
          <p className="text-gray-700 text-lg min-h-[3rem] flex items-center justify-center">
            {translation || (errorMsg && <span className="text-red-500 font-medium">{errorMsg}</span>)}
          </p>
        </div>
      </div>
    </div>
  );
};

export default App;
/*